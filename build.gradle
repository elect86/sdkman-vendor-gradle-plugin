plugins {
    id "groovy"
    id "com.gradle.build-scan" version "2.2.1"
    id "com.gradle.plugin-publish" version "0.10.1"
    id "org.jetbrains.kotlin.jvm" version "1.3.72"
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

group = 'io.sdkman'
archivesBaseName = 'sdkman-vendor-gradle-plugin'

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

repositories {
    jcenter()
    maven{ url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation 'com.beust:klaxon:5.2'
    implementation "khttp:khttp:1.0.0"
    compile gradleApi()
    compile 'org.codehaus.groovy:groovy-all:2.5.6'
    compile 'com.github.groovy-wslite:groovy-wslite:1.1.3'
    compile 'org.hibernate:hibernate-validator:5.1.3.Final'
    compile 'javax.el:javax.el-api:2.2.4'
    compile 'javax.xml.bind:jaxb-api:2.3.1'
    compile 'org.glassfish.web:javax.el:2.2.4'
    testCompile('org.spockframework:spock-core:1.2-groovy-2.5') {
        exclude group: 'org.codehaus.groovy'
    }
    testCompile 'cglib:cglib-nodep:3.1'
    testCompile 'com.github.tomakehurst:wiremock:1.46'

    testImplementation("io.kotest:kotest-runner-junit5-jvm:4.1.0.293-SNAPSHOT")
    testImplementation("io.kotest:kotest-assertions-core-jvm:4.1.0.293-SNAPSHOT")
    testImplementation("io.kotest:kotest-runner-console-jvm:4.1.0.293-SNAPSHOT")
}

test {
    useJUnitPlatform()
}

pluginBundle {
    website = 'http://sdkman.io/'
    vcsUrl = 'https://github.com/sdkman/gradle-sdkman-vendor-plugin'
    description = 'The SDKMAN Vendor Gradle Plugin.'
    tags = ['sdkman', 'sdk', 'gvm', 'gvmtool']

    plugins {
        sdkmanVendorPlugin {
            id = 'io.sdkman.vendors'
            displayName = 'SDKMAN! Vendor Plugin'
        }
    }
}

apply plugin: 'distribution'

distributions {
    main {
        baseName = archivesBaseName
        contents {
            from { libsDir }
        }
    }
}

ext {
    bintrayBaseUrl = 'https://api.bintray.com/maven'
    bintrayUsername = 'sdkman'
    bintrayRepository = 'gradle-plugins'
    bintrayPackage = 'sdkman-vendor-gradle-plugin'
}

apply plugin: 'maven-publish'

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'source'
}

publishing {
    publications {
        plugin(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier "sources"
            }

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'SDKMAN! Vendor Gradle plugin')
                root.appendNode('description', 'Gradle plugin for SDKMAN! Vendors to publish Releases.')
                root.appendNode('inceptionYear', '2018')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'The Apache Software License, Version 2.0')
                license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                license.appendNode('distribution', 'repo')

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('name', 'Marco Vermeulen')
                developer.appendNode('email', 'marco@sdkman.io')
            }

        }
    }

    repositories {
        maven {
            name 'Bintray'
            url "$bintrayBaseUrl/$bintrayUsername/$bintrayRepository/$bintrayPackage"

            credentials {
                username = System.getenv('BINTRAY_USERNAME') ?: 'invalid_user'
                password = System.getenv('BINTRAY_API_KEY') ?: 'invalid_key'
            }
        }
    }
}
